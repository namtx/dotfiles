function fpr() {
  ls ~/workspace/personio | fzfp | read project
  cd "/Users/namtx/workspace/personio/${project}"
}

function wsf() {
  ls ~/workspace | fzfp | read project
  cd "/Users/namtx/workspace/${project}"
}

function lsf() {

  ls | fzfp | read d
  cd "$(pwd)/$d"
}

function pr-checkout() {
  local pr_number
  pr_number=$(
    glab mr list |
    fzf |
    sed 's/^!\([0-9][0-9]*\).*/\1/'
  )

  glab mr checkout "$pr_number"
}

function conf() {
  case $1 in
    nvim)
      nvim ~/.config/nvim
      ;;
    # skhd)
    #   nvim ~/.config/skhd/skhdrc
    #   ;;
    # kitty)
    #   nvim ~/.config/kitty/kitty.conf
    #   ;;
    # yabai)
    #   nvim ~/.config/yabai/yabairc
    #   ;;
    zsh)
      nvim ~/.zshrc
      ;;
    *)
      nvim $1
      ;;
  esac
}

function source_nvm() {
  source $(brew --prefix nvm)/nvm.sh
}

# Connect to Airpods
function airpod() {
  airpod_address=$(blueutil --paired --format json | jq '.[] | select(.name | contains("Airpods")) | .address' | tr -d '"')

  blueutil --connect $airpod_address
}

function wtc() {
  git commit -m "$(curl -s https://whatthecommit.com/index.txt)"
}

# UTILS
function mkdircd() {
  mkdir -p ${1} && \
    cd -P -- ${1}
}

function telegram() {
  ps aux | rg -v rg | rg '/Applications/Telegram.app/Contents/MacOS/Telegram' | awk '{print $2}' | read telegram_pid
  if [[ $telegram_pid ]]; then
    kill $telegram_pid
  fi

  ls ~/telegram-accounts | fzfp | read telegram_account
  
  cp -R ~/telegram-accounts/${telegram_account}/. ~/Library/Application\ Support/Telegram\ Desktop
  /Applications/Telegram.app/Contents/MacOS/Telegram
}

function help() {
  case $1 in
    skhd)
      bat ~/.config/skhd/skhdrc
      ;;
  esac
}

# fuzzy search the commit message and show its changes
function gscf() { 
  git log --graph --oneline | fzfp | choose 1 | xargs git show
}

# fzf for picking asdf tool version
function asdfzf() {
  local tool
  tool=$(asdf plugin list | fzfp)
  asdf shell $tool $({asdf list $tool} | fzfp)
}

unalias gpod

function gpod() {
  master_branch_exists=`git show-ref refs/heads/master`
  echo $master_branch_exists
  if [ -n "$master_branch_exists" ]; then
    git pull origin master
  else
    git pull origin main
  fi
}

# Copy current branch into clipboard
function ccg() {
  git rev-parse --abbrev-ref HEAD | pbcopy
}

# Personio
#
# Run test through Kubernetes pod
function kpunit() {
  local pod_name=$(kubectl get pods -l app.kubernetes.io/name=web -o jsonpath={".items[0].metadata.name"})
  if [ $# -ge 2 ]; then
    kubectl exec -it $pod_name -- vendor/phpunit/phpunit/phpunit $1 --filter $2
  else 
    kubectl exec -it $pod_name -- vendor/phpunit/phpunit/phpunit $1
  fi
}

findandkill() {  
  port=$(lsof -n -i4TCP:$1 | grep LISTEN | awk '{ print $2 }')  
  kill -9 $port
} 
alias killport=findandkill
